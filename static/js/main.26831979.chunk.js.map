{"version":3,"sources":["selectors/index.js","selectors/converter.js","actions/actionTypes.js","actions/converter.js","components/ConverterItem.js","components/Converter.js","selectors/currencyList.js","components/CurrencyList.js","components/App.js","serviceWorker.js","reducers/converter.js","reducers/index.js","reducers/currencyList.js","actions/currencyList.js","sagas/startWebsocketSagas.js","sagas/requestExchangeRate.js","sagas/index.js","index.js"],"names":["converterSelector","state","converter","currencyListSelector","currencyList","availableCurrenciesSelector","createSelector","availableCurrencies","fromCurrencySelector","fromCurrency","fromValueSelector","toCurrencySelector","toCurrency","toValueSelector","toValue","inputFieldsShouldBeDisabledSelector","requestExchangeRateSuccess","rate","type","actionTypes","selectToCurrency","currency","ConverterItem","label","id","selectedCurrencyChangeHandler","selectedCurrency","currencyValue","currencyValueChangeHandler","inputFieldsShouldBeDisabled","className","htmlFor","onChange","e","target","value","key","undefined","length","map","step","Number","disabled","Converter","useSelector","fromValue","dispatch","useDispatch","selectFromCurrency","changeFromValue","changeToValue","currencyListIsSubscribedSelector","isSubscribed","currencyListDataSelector","data","currencyListErrorSelector","error","CurrencyList","currencyListIsSubscribed","currencyListError","currencyListData","directionColor","i","direction","priceRateDirectionBackgroundColor","Object","keys","onClick","price","App","Boolean","window","location","hostname","match","zeroExchangeRateErr","Error","combineReducers","action","prevPrice","item","startWebsocketSubscriptionFail","startWebsocketSagas","websocketInitChannel","eventChannel","emitter","ccStreamer","WebSocket","process","onopen","send","JSON","stringify","subs","onerror","onmessage","event","parsedEventData","parse","TYPE","FSYM","P","onclose","call","channel","take","put","select","from","to","url","fetch","then","response","json","result","init","currencyListChangesSubscriber","exchangeRatesChangeSubscriber","rootSaga","takeLatest","requestExchangeRate","all","sagaMiddleware","createSagaMiddleware","devTools","applyMiddleware","store","createStore","rootReducer","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.26831979.chunk.js","sourcesContent":["export const converterSelector = state => state.converter;\r\n\r\nexport const currencyListSelector = state => state.currencyList;\r\n","import { createSelector } from \"reselect\";\r\n\r\nimport { converterSelector } from \"./index\";\r\n\r\nexport const availableCurrenciesSelector = createSelector(\r\n  converterSelector,\r\n  converter => converter.availableCurrencies\r\n);\r\n\r\nexport const fromCurrencySelector = createSelector(\r\n  converterSelector,\r\n  converter => converter.fromCurrency\r\n);\r\n\r\nexport const fromValueSelector = createSelector(\r\n  converterSelector,\r\n  converter =>\r\n    // converter => (Math.round(converter.fromValue * 100) / 100).toFixed(5)\r\n    converter.fromValue\r\n);\r\n\r\nexport const toCurrencySelector = createSelector(\r\n  converterSelector,\r\n  converter => converter.toCurrency\r\n);\r\n\r\nexport const toValueSelector = createSelector(\r\n  converterSelector,\r\n  converter => converter.toValue\r\n);\r\n\r\nexport const inputFieldsShouldBeDisabledSelector = createSelector(\r\n  [fromCurrencySelector, toCurrencySelector],\r\n  (fromCurrency, toCurrency) => {\r\n    if (fromCurrency && toCurrency) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n);\r\n","export default {\r\n  // Currency List\r\n  START_WEBSOCKET_SUBSCRIPTION: \"START_WEBSOCKET_SUBSCRIPTION\",\r\n  START_WEBSOCKET_SUBSCRIPTION_SUCCESS: \"START_WEBSOCKET_SUBSCRIPTION_SUCCESS\",\r\n  START_WEBSOCKET_SUBSCRIPTION_FAIL: \"START_WEBSOCKET_SUBSCRIPTION_FAIL\",\r\n  STOP_WEBSOCKET_SUBSCRIPTION: \"STOP_WEBSOCKET_SUBSCRIPTION\",\r\n  UPDATE_CURRENCY_LIST_ITEM_PRICE: \"UPDATE_CURRENCY_LIST_ITEM_PRICE\",\r\n\r\n  // Converter\r\n  REQUEST_EXCHANGE_RATE: \"REQUEST_EXCHANGE_RATE\",\r\n  REQUEST_EXCHANGE_RATE_SUCCESS: \"REQUEST_EXCHANGE_RATE_SUCCESS\",\r\n  REQUEST_EXCHANGE_RATE_FAIL: \"REQUEST_EXCHANGE_RATE_FAIL\",\r\n  SELECT_FROM_CURRENCY: \"SELECT_FROM_CURRENCY\",\r\n  CHANGE_FROM_VALUE: \"CHANGE_FROM_VALUE\",\r\n  SELECT_TO_CURRENCY: \"SELECT_TO_CURRENCY\",\r\n  CHANGE_TO_VALUE: \"CHANGE_TO_VALUE\"\r\n};\r\n","import actionTypes from \"./actionTypes\";\r\n\r\nexport const requestExchangeRate = () => {\r\n  return { type: actionTypes.REQUEST_EXCHANGE_RATE };\r\n};\r\n\r\nexport const requestExchangeRateSuccess = rate => {\r\n  return { type: actionTypes.REQUEST_EXCHANGE_RATE_SUCCESS, rate };\r\n};\r\n\r\nexport const selectFromCurrency = currency => {\r\n  return { type: actionTypes.SELECT_FROM_CURRENCY, currency };\r\n};\r\n\r\nexport const changeFromValue = value => {\r\n  return { type: actionTypes.CHANGE_FROM_VALUE, value };\r\n};\r\n\r\nexport const selectToCurrency = currency => {\r\n  return { type: actionTypes.SELECT_TO_CURRENCY, currency };\r\n};\r\n\r\nexport const changeToValue = value => {\r\n  return { type: actionTypes.CHANGE_TO_VALUE, value };\r\n};\r\n","import React from \"react\";\r\n\r\nconst ConverterItem = ({\r\n  label,\r\n  id,\r\n  selectedCurrencyChangeHandler,\r\n  selectedCurrency,\r\n  availableCurrencies,\r\n  currencyValue,\r\n  currencyValueChangeHandler,\r\n  inputFieldsShouldBeDisabled\r\n}) => (\r\n  <div className=\"converter-item\">\r\n    <label htmlFor={id}>{label}</label>\r\n    <select\r\n      id={id}\r\n      onChange={e => selectedCurrencyChangeHandler(e.target.value)}\r\n      value={selectedCurrency}\r\n    >\r\n      <option key={undefined} value={undefined} />\r\n      {availableCurrencies &&\r\n        availableCurrencies.length > 0 &&\r\n        availableCurrencies.map(currency => (\r\n          <option key={currency} value={currency}>\r\n            {currency}\r\n          </option>\r\n        ))}\r\n    </select>\r\n    <input\r\n      type=\"number\"\r\n      step=\"any\"\r\n      value={currencyValue}\r\n      onChange={e => currencyValueChangeHandler(Number(e.target.value))}\r\n      disabled={inputFieldsShouldBeDisabled}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default ConverterItem;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  availableCurrenciesSelector,\r\n  fromCurrencySelector,\r\n  fromValueSelector,\r\n  toCurrencySelector,\r\n  toValueSelector,\r\n  inputFieldsShouldBeDisabledSelector\r\n} from \"../selectors/converter\";\r\nimport {\r\n  selectFromCurrency,\r\n  changeFromValue,\r\n  selectToCurrency,\r\n  changeToValue\r\n} from \"../actions/converter\";\r\n\r\nimport ConverterItem from \"./ConverterItem\";\r\n\r\nconst Converter = () => {\r\n  const availableCurrencies = useSelector(availableCurrenciesSelector);\r\n  const fromCurrency = useSelector(fromCurrencySelector);\r\n  const fromValue = useSelector(fromValueSelector);\r\n  const toCurrency = useSelector(toCurrencySelector);\r\n  const toValue = useSelector(toValueSelector);\r\n  const inputFieldsShouldBeDisabled = useSelector(\r\n    inputFieldsShouldBeDisabledSelector\r\n  );\r\n  const dispatch = useDispatch();\r\n  const selectFromCurrencyHandler = currency =>\r\n    dispatch(selectFromCurrency(currency));\r\n  const changeFromValueHandler = value => dispatch(changeFromValue(value));\r\n  const selectToCurrencyHandler = currency =>\r\n    dispatch(selectToCurrency(currency));\r\n  const changeToValueHandler = value => dispatch(changeToValue(value));\r\n\r\n  return (\r\n    <div className=\"main-block\">\r\n      <h2>Converter</h2>\r\n      <>\r\n        <ConverterItem\r\n          label=\"Choose currency to convert FROM\"\r\n          id=\"fromCurrency\"\r\n          selectedCurrencyChangeHandler={selectFromCurrencyHandler}\r\n          selectedCurrency={fromCurrency}\r\n          availableCurrencies={availableCurrencies}\r\n          currencyValue={fromValue}\r\n          currencyValueChangeHandler={changeFromValueHandler}\r\n          inputFieldsShouldBeDisabled={inputFieldsShouldBeDisabled}\r\n        />\r\n        <ConverterItem\r\n          label=\"Choose currency to convert TO\"\r\n          id=\"toCurrency\"\r\n          selectedCurrencyChangeHandler={selectToCurrencyHandler}\r\n          selectedCurrency={toCurrency}\r\n          availableCurrencies={availableCurrencies}\r\n          currencyValue={toValue}\r\n          currencyValueChangeHandler={changeToValueHandler}\r\n          inputFieldsShouldBeDisabled={inputFieldsShouldBeDisabled}\r\n        />\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","import { createSelector } from \"reselect\";\r\n\r\nimport { currencyListSelector } from \"./index\";\r\n\r\nexport const currencyListIsSubscribedSelector = createSelector(\r\n  currencyListSelector,\r\n  currencyList => currencyList.isSubscribed\r\n);\r\n\r\nexport const currencyListDataSelector = createSelector(\r\n  currencyListSelector,\r\n  currencyList => currencyList.data\r\n);\r\n\r\nexport const currencyListErrorSelector = createSelector(\r\n  currencyListSelector,\r\n  currencyList => currencyList.error\r\n);\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  currencyListIsSubscribedSelector,\r\n  currencyListDataSelector,\r\n  currencyListErrorSelector\r\n} from \"../selectors/currencyList\";\r\n\r\nimport { selectToCurrency } from \"../actions/converter\";\r\n\r\nconst priceRateDirectionBackgroundColor = direction => {\r\n  switch (direction) {\r\n    case \"UP\":\r\n      return \"green\";\r\n    case \"DOWN\":\r\n      return \"red\";\r\n    default:\r\n      return \"grey\";\r\n  }\r\n};\r\n\r\nconst CurrencyList = () => {\r\n  const currencyListIsSubscribed = useSelector(\r\n    currencyListIsSubscribedSelector\r\n  );\r\n  const currencyListError = useSelector(currencyListErrorSelector);\r\n  const currencyListData = useSelector(currencyListDataSelector);\r\n  const dispatch = useDispatch();\r\n  const selectToCurrencyHandler = currency =>\r\n    dispatch(selectToCurrency(currency));\r\n\r\n  const directionColor = i =>\r\n    priceRateDirectionBackgroundColor(currencyListData[i].rate);\r\n\r\n  return (\r\n    <div className=\"main-block\">\r\n      <h2>Currency List</h2>\r\n      {currencyListError ? (\r\n        <>\r\n          <p>Ooops!</p>\r\n          <p>{currencyListError}</p>\r\n        </>\r\n      ) : currencyListIsSubscribed ? (\r\n        Object.keys(currencyListData).map(i => (\r\n          <p\r\n            onClick={() => {\r\n              selectToCurrencyHandler(i);\r\n            }}\r\n            className={`${directionColor(i)}-bgc cursor-pointer`}\r\n            key={i}\r\n          >\r\n            {i}: {currencyListData[i].price}\r\n          </p>\r\n        ))\r\n      ) : (\r\n        <p>loading ... </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyList;\r\n","import React from \"react\";\n\nimport Converter from \"./Converter\";\nimport CurrencyList from \"./CurrencyList\";\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <CurrencyList />\n      <Converter />\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import actionTypes from \"../actions/actionTypes\";\r\n\r\nconst zeroExchangeRateErr = new Error(\"Exchange rate can't be equal to 0\");\r\n\r\nexport default (\r\n  state = {\r\n    availableCurrencies: [\"BTC\", \"ETH\", \"XRP\", \"LTC\", \"BCH\", \"USD\", \"EUR\"],\r\n    fromCurrency: undefined,\r\n    fromValue: 0,\r\n    toCurrency: undefined,\r\n    toValue: 0,\r\n    rate: undefined\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case actionTypes.REQUEST_EXCHANGE_RATE_SUCCESS:\r\n      if (action.rate === 0) throw zeroExchangeRateErr;\r\n      return {\r\n        ...state,\r\n        rate: action.rate,\r\n        toValue: state.fromValue * action.rate\r\n      };\r\n    case actionTypes.SELECT_FROM_CURRENCY:\r\n      return { ...state, fromCurrency: action.currency };\r\n    case actionTypes.CHANGE_FROM_VALUE:\r\n      return {\r\n        ...state,\r\n        fromValue: action.value,\r\n        toValue: state.rate ? action.value * state.rate : state.toValue\r\n      };\r\n    case actionTypes.SELECT_TO_CURRENCY:\r\n      return { ...state, toCurrency: action.currency };\r\n    case actionTypes.CHANGE_TO_VALUE:\r\n      if (state.rate === 0) throw zeroExchangeRateErr;\r\n      return {\r\n        ...state,\r\n        toValue: action.value,\r\n        fromValue: state.rate ? action.value / state.rate : state.fromValue\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport currencyListReducers from \"./currencyList\";\r\nimport converterReducers from \"./converter\";\r\n\r\nexport default combineReducers({\r\n  currencyList: currencyListReducers,\r\n  converter: converterReducers,\r\n  // availableCurrencies: () => [\"BTC\", \"ETH\", \"XRP\", \"LTC\", \"BCH\"]\r\n});\r\n","import actionTypes from \"../actions/actionTypes\";\r\n\r\nexport default (\r\n  state = { isSubscribed: false, data: {}, error: undefined },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case actionTypes.START_WEBSOCKET_SUBSCRIPTION_SUCCESS:\r\n      return { ...state, isSubscribed: true };\r\n    case actionTypes.START_WEBSOCKET_SUBSCRIPTION_FAIL:\r\n      return { ...state, isSubscribed: false, error: action.error };\r\n    case actionTypes.STOP_WEBSOCKET_SUBSCRIPTION:\r\n      return { ...state, isSubscribed: false };\r\n    case actionTypes.UPDATE_CURRENCY_LIST_ITEM_PRICE: {\r\n      const prevPrice = (state.data[action.item] || {}).price;\r\n      const price = action.price;\r\n      const rate =\r\n        prevPrice &&\r\n        (price !== prevPrice\r\n          ? price > prevPrice\r\n            ? \"UP\"\r\n            : \"DOWN\"\r\n          : (state.data[action.item] || {}).rate);\r\n      return {\r\n        ...state,\r\n        data: {\r\n          ...state.data,\r\n          [action.item]: {\r\n            ...state.data[action.item],\r\n            price,\r\n            prevPrice,\r\n            rate\r\n          }\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import actionTypes from \"./actionTypes\";\r\n\r\nexport const startWebsocketSubscription = () => {\r\n  return { type: actionTypes.START_WEBSOCKET_SUBSCRIPTION };\r\n};\r\n\r\nexport const startWebsocketSubscriptionSuccess = () => {\r\n  return { type: actionTypes.START_WEBSOCKET_SUBSCRIPTION_SUCCESS };\r\n};\r\n\r\nexport const startWebsocketSubscriptionFail = error => {\r\n  return {\r\n    type: actionTypes.START_WEBSOCKET_SUBSCRIPTION_FAIL,\r\n    error\r\n  };\r\n};\r\n\r\nexport const stopWebsocketSubscription = () => {\r\n  return { type: actionTypes.STOP_WEBSOCKET_SUBSCRIPTION };\r\n};\r\n\r\nexport const updateCurrencyListItemPrice = (item, price) => {\r\n  return { type: actionTypes.UPDATE_CURRENCY_LIST_ITEM_PRICE, item, price };\r\n};\r\n","import { call, take, put } from \"redux-saga/effects\";\r\nimport { eventChannel } from \"redux-saga\";\r\n\r\nimport {\r\n  startWebsocketSubscriptionSuccess,\r\n  startWebsocketSubscriptionFail,\r\n  stopWebsocketSubscription,\r\n  updateCurrencyListItemPrice\r\n} from \"../actions/currencyList\";\r\n\r\nfunction websocketInitChannel() {\r\n  return eventChannel(emitter => {\r\n    const ccStreamer = new WebSocket(\r\n      `wss://streamer.cryptocompare.com/v2?api_key=${process.env.REACT_APP_CRYPTOCOMPAREAPI_KEY}`\r\n    );\r\n\r\n    ccStreamer.onopen = () => {\r\n      const subRequest = {\r\n        action: \"SubAdd\",\r\n        subs: [\r\n          \"0~Coinbase~BTC~USD\",\r\n          \"0~Coinbase~ETH~USD\",\r\n          \"0~Coinbase~XRP~USD\",\r\n          \"0~Coinbase~LTC~USD\",\r\n          \"0~Coinbase~BCH~USD\"\r\n        ]\r\n      };\r\n      ccStreamer.send(JSON.stringify(subRequest));\r\n      return emitter(startWebsocketSubscriptionSuccess());\r\n    };\r\n\r\n    ccStreamer.onerror = error => {\r\n      return emitter(startWebsocketSubscriptionFail(error));\r\n    };\r\n\r\n    ccStreamer.onmessage = event => {\r\n      if (event.type === \"error\") {\r\n        return emitter(startWebsocketSubscriptionFail(event.error));\r\n      } else {\r\n        const parsedEventData = JSON.parse(event.data);\r\n        if (parsedEventData.TYPE === \"0\") {\r\n          return emitter(\r\n            updateCurrencyListItemPrice(parsedEventData.FSYM, parsedEventData.P)\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    ccStreamer.onclose = () => {\r\n      return emitter(stopWebsocketSubscription());\r\n    };\r\n\r\n    return () => {\r\n      // REQUIRED\r\n    };\r\n  });\r\n}\r\n\r\nexport default function* startWebsocketSagas() {\r\n  const channel = yield call(websocketInitChannel);\r\n  while (true) {\r\n    const action = yield take(channel);\r\n    yield put(action);\r\n  }\r\n}\r\n","import { put, select } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  requestExchangeRate,\r\n  requestExchangeRateSuccess\r\n} from \"../actions/converter\";\r\n\r\nexport const selectFromCurrency = state => state.converter.fromCurrency;\r\nexport const selectToCurrency = state => state.converter.toCurrency;\r\n\r\nexport default function*() {\r\n  const from = yield select(selectFromCurrency);\r\n  const to = yield select(selectToCurrency);\r\n\r\n  const url = `https://rest.coinapi.io/v1/exchangerate/${from}/${to}?apiKey=${process.env.REACT_APP_COINAPI_KEY}`;\r\n\r\n  if (from && to) {\r\n    yield put(requestExchangeRate());\r\n    if (from === to) {\r\n      yield put(requestExchangeRateSuccess(1));\r\n    } else {\r\n      const result = yield fetch(url).then(response => response.json());\r\n      yield put(requestExchangeRateSuccess(result.rate));\r\n    }\r\n  }\r\n}\r\n","import { takeLatest, all, put } from \"redux-saga/effects\";\r\n\r\nimport actionTypes from \"../actions/actionTypes\";\r\nimport { startWebsocketSubscription } from \"../actions/currencyList\";\r\nimport startWebsocketSagas from \"./startWebsocketSagas\";\r\nimport requestExchangeRate from \"./requestExchangeRate\";\r\n\r\nfunction* init() {\r\n  yield put(startWebsocketSubscription());\r\n}\r\n\r\nfunction* currencyListChangesSubscriber() {\r\n  yield takeLatest(\r\n    actionTypes.START_WEBSOCKET_SUBSCRIPTION,\r\n    startWebsocketSagas\r\n  );\r\n}\r\n\r\nfunction* exchangeRatesChangeSubscriber() {\r\n  yield takeLatest(actionTypes.SELECT_FROM_CURRENCY, requestExchangeRate);\r\n  yield takeLatest(actionTypes.SELECT_TO_CURRENCY, requestExchangeRate);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    init(),\r\n    currencyListChangesSubscriber(),\r\n    exchangeRatesChangeSubscriber()\r\n  ]);\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport rootReducer from \"./reducers/index\";\nimport rootSaga from \"./sagas/index\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst devTools =\n  process.env.NODE_ENV === \"production\"\n    ? applyMiddleware(sagaMiddleware)\n    : composeWithDevTools(applyMiddleware(sagaMiddleware));\n\nconst store = createStore(rootReducer, devTools);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}